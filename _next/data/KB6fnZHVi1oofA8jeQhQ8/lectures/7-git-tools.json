{"pageProps":{"lecture":{"title":"Git tools","releaseDate":"2021-11-29T16:00:00","slug":"7-git-tools","author":"Ali Heydari","content":"<h2><a href=\"https://github.com/petervanderdoes/gitflow-avh\">Git-Flow</a></h2>\n<p>git flow is a set of tools that helps you to manage your git workflow.</p>\n<ul>\n<li>To initialize a new repo with the basic branch structure, use:</li>\n</ul>\n<div><pre><code><span> </span><span> </span><span> </span><span> </span><span>git</span><span> </span>flow<span> </span>init<span> </span><span>[</span>-d<span>]</span>\n</code></pre></div>\n<p>The <code>-d</code> flag will accept all defaults.</p>\n<p>This will then interactively prompt you with some questions on which branches\nyou would like to use as development and production branches, and how you\nwould like your prefixes be named. You may simply press Return on any of\nthose questions to accept the (sane) default suggestions.</p>\n<p><img src=\"http://i.imgur.com/lFQbY5V.gif\" alt=\"Screencast git flow init\"></p>\n<ul>\n<li>To list/start/finish/delete feature branches, use:</li>\n</ul>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>feature<span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>feature<span> </span>start<span> </span><span>&#x3C;</span>name<span>></span><span> </span><span>[</span><span>&#x3C;</span>base<span>></span><span>]</span><span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>feature<span> </span>finish<span> </span><span>&#x3C;</span>name<span>></span><span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>feature<span> </span>delete<span> </span><span>&#x3C;</span>name<span>></span>\n</code></pre></div>\n<p>For feature branches, the <code>&#x3C;base></code> arg must be a branch, when omitted it defaults to the develop branch.</p>\n<ul>\n<li>To push/pull a feature branch to the remote repository, use:</li>\n</ul>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>feature<span> </span>publish<span> </span><span>&#x3C;</span>name<span>></span><span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>feature<span> </span>track<span> </span><span>&#x3C;</span>name<span>></span>\n</code></pre></div>\n<ul>\n<li>To list/start/finish/delete release branches, use:</li>\n</ul>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>release<span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>release<span> </span>start<span> </span><span>&#x3C;</span>release<span>></span><span> </span><span>[</span><span>&#x3C;</span>base<span>></span><span>]</span><span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>release<span> </span>finish<span> </span><span>&#x3C;</span>release<span>></span><span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>release<span> </span>delete<span> </span><span>&#x3C;</span>release<span>></span>\n</code></pre></div>\n<p>For release branches, the <code>&#x3C;base></code> arg must be a branch, when omitted it defaults to the develop branch.</p>\n<ul>\n<li>To list/start/finish/delete hotfix branches, use:</li>\n</ul>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>hotfix<span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>hotfix<span> </span>start<span> </span><span>&#x3C;</span>release<span>></span><span> </span><span>[</span><span>&#x3C;</span>base<span>></span><span>]</span><span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>hotfix<span> </span>finish<span> </span><span>&#x3C;</span>release<span>></span><span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>hotfix<span> </span>delete<span> </span><span>&#x3C;</span>release<span>></span>\n</code></pre></div>\n<p>For hotfix branches, the <code>&#x3C;base></code> arg must be a branch, when omitted it defaults to the production branch.</p>\n<ul>\n<li>To list/start support branches, use:</li>\n</ul>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>support<span></span>\n<span></span><span>git</span><span> </span>flow<span> </span>support<span> </span>start<span> </span><span>&#x3C;</span>release<span>></span><span> </span><span>&#x3C;</span>base<span>></span>\n</code></pre></div>\n<p>For support branches, the <code>&#x3C;base></code> arg must be a branch, when omitted it defaults to the production branch.</p>\n<h3>Share features with others</h3>\n<p>You can easily publish a feature you are working on. The reason can be to allow other programmers to work on it or to access it from another machine. The publish/track feature of gitflow simplify the creation of a remote branch and its tracking.</p>\n<p>When you want to publish a feature just use:</p>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>feature<span> </span>publish<span> </span><span>&#x3C;</span>name<span>></span>\n</code></pre></div>\n<p>or, if you already are into the <code>feature/&#x3C;name></code> branch, just issue:</p>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>feature<span> </span>publish\n</code></pre></div>\n<p>Now if you execute <code>git branch -avv</code> you will see that your branch <code>feature/&#x3C;name></code> tracks <code>[origin/feature/&#x3C;name>]</code>. To track the same remote branch in another clone of the same repository use:</p>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>feature<span> </span>track<span> </span><span>&#x3C;</span>name<span>></span>\n</code></pre></div>\n<p>This will create a local feature <code>feature/&#x3C;name></code> that tracks the same remote branch as the original one, that is <code>origin/feature/&#x3C;name></code>.</p>\n<p>When one developer (depending on your work flow) finishes working on the feature he or she can issue <code>git flow feature finish &#x3C;name></code> and this will automatically delete the remote branch. All other developers shall then run:</p>\n<div><pre><code><span> </span><span> </span><span> </span><span> </span><span>git</span><span> </span>flow<span> </span>feature<span> </span>delete<span> </span><span>&#x3C;</span>name<span>></span>\n</code></pre></div>\n<p>to get rid of the local feature that tracks a remote branch that no more exist.</p>\n<h3>Share hotfixes with others</h3>\n<p>You can publish an hotfix you are working on. The reason can be to allow other programmers to work on it or validate it or to access it from another machine.</p>\n<p>When you want to publish an hotfix just use (as you did for features):</p>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>hotfix<span> </span>publish<span> </span><span>&#x3C;</span>name<span>></span>\n</code></pre></div>\n<p>or, if you already are into the <code>hotfix/&#x3C;name></code> branch, just issue:</p>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>hotfix<span> </span>publish\n</code></pre></div>\n<p>Other developers can now update their repositories and checkout the hotfix:</p>\n<div><pre><code><span>git</span><span> </span>pull<span></span>\n<span></span><span>git</span><span> </span>checkout<span> </span>hotfix/<span>&#x3C;</span>name<span>></span>\n</code></pre></div>\n<p>and eventually finish it:</p>\n<div><pre><code><span>git</span><span> </span>flow<span> </span>hotfix<span> </span>finish\n</code></pre></div>\n<h2><a href=\"https://github.com/dandavison/delta\">Delta</a></h2>\n<p>A syntax-highlighting pager for git and diff output</p>\n<p>You can download an executable for your system:\n<a href=\"https://github.com/dandavison/delta/releases\">releases</a></p>\n<div><pre><code>[core]\n    pager = delta\n[interactive]\n    diffFilter = delta --color-only --features=interactive\n[delta]\n    features = decorations\n[delta &#x26;quot;interactive&#x26;quot;]\n    keep-plus-minus-markers = false\n[delta &#x26;quot;decorations&#x26;quot;]\n    commit-decoration-style = blue ol\n    commit-style = raw\n    file-style = omit\n    hunk-header-decoration-style = blue box\n    hunk-header-file-style = red\n    hunk-header-line-number-style = &#x26;quot;#067a00&#x26;quot;\n    hunk-header-style = file line-number syntax</code></pre></div>\n<h2><a href=\"https://meldmerge.org/\">Meld</a></h2>\n<p>A GUI for git merges.\nMeld is a visual diff and merge tool targeted at developers. Meld helps you compare files, directories, and version controlled projects. It provides two- and three-way comparison of both files and directories, and has support for many popular version control systems.</p>\n<h2><a href=\"https://github.com/commitizen/cz-cli\">Commitizen CLI</a></h2>\n<p>The commitizen command line utility.</p>\n<h3>Installing the command line tool</h3>\n<p>Commitizen is currently tested against Node.js 12, 14, &#x26; 16, although it may work in\nolder versions of Node.js. You should also have npm 6 or greater.</p>\n<p>Installation is as simple as running the following command (if you see <code>EACCES</code> error, reading <a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\">fixing npm permissions</a> may help):</p>\n<div><pre><code>npm install -g commitizen</code></pre></div>\n<p><a href=\"https://github.com/commitizen/cz-cli/blob/master/README.md#making-your-repo-commitizen-friendly\">Making your repo Commitizen friendly</a></p>\n<h2>Commit lint</h2>\n<p>Lint commit messages</p>\n<h2><a href=\"https://github.com/typicode/husky\">Husky</a></h2>\n<p>Git hooks made easy.</p>\n<p>A git hook to prettify staged files:</p>\n<div><pre><code><span>#!/bin/sh</span><span></span>\n<span></span><span>.</span><span> </span><span>\"<span><span>$(</span><span>dirname</span><span> </span><span>\"<span>$0</span>\"</span><span>)</span></span>/_/husky.sh\"</span><span></span>\n<span></span><span></span>\n<span></span>pretty-quick<span> </span>--staged\n</code></pre></div>\n<h2><a href=\"https://github.com/evilmartians/lefthook\">Lefthook</a></h2>\n<p>Fast and powerful Git hooks manager for any type of projects.</p>\n<h2><a href=\"https://github.com/okonet/lint-staged\">Lint staged</a></h2>\n<p>Run linters against staged git files</p>\n<div><pre><code>npx<span> </span>mrm@2<span> </span>lint-staged\n</code></pre></div>\n<h2><a href=\"https://github.com/mykolaharmash/git-jump\">Git jump</a></h2>\n<p>Improved navigation between Git branches.</p>\n<div><pre><code><span>npm</span><span> </span><span>install</span><span> </span>-g<span> </span>git-jump\n</code></pre></div>\n<div><pre><code><span>git</span><span> </span>jump<span> </span><span>&#x3C;</span>branch<span> </span>name<span>></span>\n</code></pre></div>\n<p>Switches to a branch. <code>&#x3C;branch name></code> can be just part of the name, <code>git jump</code> will look for the best matching branch.</p>\n<div><pre><code><span>git</span><span> </span>jump<span> </span><span>[</span>--list<span> </span><span>|</span><span> </span>-l<span>]</span>\n</code></pre></div>\n<p>Shows a plain list of branches without interactive UI but with sorting.</p>\n<div><pre><code><span>git</span><span> </span>jump<span> </span><span>&#x3C;</span>any<span> </span>native<span> </span>switch<span> </span>arguments<span>></span>\n</code></pre></div>\n<p>You can use <code>git jump</code> as a drop-in replacement for <a href=\"https://git-scm.com/docs/git-switch\">native <code>git switch</code></a>. <code>git jump</code> will proxy all the argument to the native command, so you don't have to think to use one or the other.</p>\n<p>For example <code>git jump my-branch --discard-changes</code> works just fine.</p>\n<div><pre><code><span>git</span><span> </span>jump<span> </span>new<span> </span><span>&#x3C;</span>branch<span> </span>name<span>></span>\n</code></pre></div>\n<p>Creates a new branch and switches into it. Supports all native parameters of <code>git switch</code>, for example <code>git jump new &#x3C;branch name> --track origin/main</code>.</p>\n<div><pre><code><span>git</span><span> </span>jump<span> </span><span>rename</span><span> </span><span>&#x3C;</span>branch<span> </span>name<span>></span><span> </span><span>&#x3C;</span>new<span> </span>branch<span> </span>name<span>></span>\n</code></pre></div>\n<p>Renames a branch.</p>\n<div><pre><code><span>git</span><span> </span>jump<span> </span>delete<span> </span><span>&#x3C;</span>branch<span> </span>name<span>></span><span> </span><span>[</span><span>&#x3C;</span>branch<span> </span>name<span>></span>,<span> </span><span>..</span>.<span>]</span>\n</code></pre></div>\n<p>Deletes one or multiple branches. No fuzzy matching here, of course 🙂.</p>\n<h2><a href=\"https://github.com/mergestat/mergestat\">MergeStat</a></h2>\n<p>Query git repositories with SQL. Generate reports, perform status checks, analyze codebases. 🔍 📊</p>\n<p><code>mergestat</code> is a command-line tool for running SQL queries on git repositories and related data sources.\nIt's meant for ad-hoc querying of source-code on disk through a common interface (SQL), as an alternative to patching together various shell commands.\nIt can execute queries that look like:</p>\n<div><pre><code><span>--<span> </span>how<span> </span>many<span> </span>commits<span> </span>have<span> </span>been<span> </span>authored<span> </span>by<span> </span><a href=\"mailto:user@email.com\">user@email.com</a>?</span><span></span>\n<span></span><span>SELECT</span><span> </span><span>count</span><span>(</span><span>*</span><span>)</span><span> </span><span>FROM</span><span> </span>commits<span> </span><span>WHERE</span><span> </span>author_email<span> </span><span>=</span><span> </span><span>'<a href=\"mailto:user@email.com\">user@email.com</a>'</span>\n</code></pre></div>\n<p>You can try queries on public git repositories without installing anything at <a href=\"https://try.askgit.com/\">try.askgit.com</a>, in our <code>Public</code> workspace.</p>\n<h2><a href=\"https://github.com/muesli/gitomatic\">Gitomatic</a></h2>\n<p>Monitor a repository for changes and automatically pull &#x26; push changes:</p>\n<div><pre><code>gitomatic &#x26;lt;path&#x26;gt;\n2019/08/03 00:16:48 Checking repository: /tmp/gitomatic-test/\n2019/08/03 00:16:48 Pulling changes...\n2019/08/03 00:16:49 New file detected: hello_world.txt\n2019/08/03 00:16:49 Adding file to work-tree: hello_world.txt\n2019/08/03 00:16:49 Creating commit: Add hello_world.txt.\n2019/08/03 00:16:49 Pushing changes...\n2019/08/03 00:16:53 Sleeping until next check in 10s...\n2019/08/03 00:17:03 Checking repository: /tmp/gitomatic-test/\n2019/08/03 00:17:03 Pulling changes...\n2019/08/03 00:17:07 Deleted file detected: hello_world.txt\n2019/08/03 00:17:07 Removing file from work-tree: hello_world.txt\n2019/08/03 00:17:07 Creating commit: Remove hello_world.txt.\n2019/08/03 00:17:07 Pushing changes...</code></pre></div>\n<p>Auth methods:</p>\n<div><pre><code>gitomatic -privkey ~/.ssh/id_rsa &#x26;lt;path&#x26;gt;\ngitomatic -username &#x26;quot;someone&#x26;quot; -password &#x26;quot;mypass&#x26;quot; &#x26;lt;path&#x26;gt;</code></pre></div>\n<p>If you want to pull new changes but don't create commits (or vice versa):</p>\n<div><pre><code>gitomatic -pull=true -push=false &#x26;lt;path&#x26;gt;</code></pre></div>\n<p>You can control how often gitomatic checks for changes:</p>\n<div><pre><code>gitomatic -interval 30m &#x26;lt;path&#x26;gt;</code></pre></div>\n<p>Change the commit author's name and email:</p>\n<div><pre><code>gitomatic -author &#x26;quot;John Doe&#x26;quot; -email &#x26;quot;some@mail.tld&#x26;quot; &#x26;lt;path&#x26;gt;</code></pre></div>\n<h2><a href=\"https://gitmoji.dev/\">Gitmoji</a></h2>\n<p>An emoji guide for your commit messages</p>\n<div><pre><code><span>npm</span><span> </span>i<span> </span>-g<span> </span>gitmoji-cli\n</code></pre></div>\n<hr>\n<p>Attachments:\n[session video 📺](\\\\192.168.100.14\\Training Courses\\git)</p>\n","tags":["lecture"]}},"__N_SSG":true}