{"pageProps":{"lecture":{"title":"Rewriting history","releaseDate":"2021-11-22T16:00:00","slug":"6-rewriting-history","author":"Ali Heydari","content":"<h2>Squash merging</h2>\n<ol>\n<li><code>git merge --squash bugfix/signup</code></li>\n<li><code>git commit -m \"[meaningfull message that represent all changes in bugfix/signup]\"</code></li>\n<li><code>git merge --no-merged</code></li>\n<li><code>git branch -D bugfix/signup</code></li>\n</ol>\n<h2>Cherry-picking</h2>\n<ol>\n<li><code>git cherry-pick &#x3C;commit-sha></code></li>\n<li><code>git restore --source=ali/feat/dark-theme -- src/_app.ts</code></li>\n</ol>\n<h2>Rebasing</h2>\n<ol>\n<li>in target branch run: <code>git rebase other-branch</code></li>\n<li>in case of conflict use: <code>git rebase --continue|--skip|--abort</code></li>\n</ol>\n<h2>Why rewrite history</h2>\n<blockquote>\n<p>Why we need history?</p>\n<p>Because we need to know <strong>WHAT</strong> was changed, <strong>WHY</strong> and <strong>WHEN</strong>.</p>\n</blockquote>\n<h3>Bad history:</h3>\n<ul>\n<li>Poor commit messages</li>\n<li>Large commits</li>\n<li>Small commits</li>\n</ul>\n<h3>Tools:</h3>\n<ul>\n<li>Squash small, related commits</li>\n<li>Split large commits</li>\n<li>Reword commit messages</li>\n<li>Drop unwanted commits</li>\n<li>Modify commits</li>\n</ul>\n<h2>The golden rule of rewriting history</h2>\n<blockquote>\n<p>Don't rewrite <strong>PUBLIC</strong> history!</p>\n<p>If you need to rewrite history, you should be rewriting your <strong>PRIVATE</strong> history.</p>\n</blockquote>\n<h2>Undoing commits</h2>\n<p><code>git reset --hard HEAD~1</code></p>\n<h2>Reverting commits</h2>\n<p><code>git revert HEAD|&#x3C;COMMIT_SHA></code></p>\n<h2>Recovering lost commits</h2>\n<ol>\n<li><code>git reflog</code></li>\n</ol>\n<h2>Amending the last commit</h2>\n<ol>\n<li><code>git commit --amend</code></li>\n<li><code>git commit --amend --no-edit</code></li>\n</ol>\n<h2>Amending an earlier commit</h2>\n<ol>\n<li><code>git rebase -i &#x3C;COMMIT_SHA>|&#x3C;BRANCH_NAME></code>\n<ul>\n<li>choose the commit you want to amend</li>\n<li>edit the commit</li>\n</ul>\n</li>\n<li><code>git add .</code></li>\n<li><code>git commit --amend</code></li>\n<li><code>git rebase --continue</code></li>\n<li><code>git rebase --skip</code></li>\n<li><code>git rebase --abort</code></li>\n</ol>\n<h2>Dropping commits</h2>\n<ol>\n<li><code>git rebase -i</code></li>\n<li>write <code>drop</code> in front of the commit you want to drop or remove the commit line</li>\n</ol>\n<h2>Rewording commit messages</h2>\n<ol>\n<li><code>git rebase -i</code></li>\n<li>write <code>reword</code> in front of the commit you want to reword</li>\n</ol>\n<h2>Reordering commits</h2>\n<ol>\n<li><code>git rebase -i</code></li>\n<li>reorder commits</li>\n</ol>\n<h2>Squashing commits</h2>\n<ol>\n<li><code>git rebase -i</code></li>\n<li>write <code>squash</code> in front of the commit you want to squash</li>\n</ol>\n<h2>Splitting a commit</h2>\n<ol>\n<li><code>git rebase -i</code></li>\n<li>write <code>edit</code> in front of the commit you want to split</li>\n<li>make changes</li>\n<li>add changes that you want to keep</li>\n<li>commit</li>\n<li>make other changes</li>\n<li>add other changes to staging area</li>\n<li>commit</li>\n</ol>\n<hr>\n<p>Attachments:\n[session video ðŸ“º](\\\\192.168.100.14\\Training Courses\\git)</p>\n","ogImage":"/git-masters/images/rebase.png","coverImage":"/git-masters/images/rebase.png","tags":["lecture"]}},"__N_SSG":true}